@inject CategoryService CategoryService

<EditForm Model="_categoryModel" OnValidSubmit="SaveCategoryAsync">
    <DataAnnotationsValidator />
    <div class="card border-0">
        <div class="card-header bg-purple text-white d-flex justify-content-between align-items-center" style="min-width: 300px">
            <h4>@(_categoryModel.Id > 0 ? "Edit" : "Add new") Category</h4>
            <button type="button" class="btn btn-sm btn-danger" @onclick="CloseFormAsync">X</button>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label">Name: </label>
                <InputText @bind-Value="_categoryModel.Name" class="form-control" placeholder="Category name" @onblur="OnNameBlur"/>
                <ValidationMessage For="()=> _categoryModel.Name"/>
            </div>
            <div class="mb-3">
                <label class="form-label">Slug: </label>
                <InputText @bind-Value="_categoryModel.Slug" class="form-control" placeholder="Category slug" disabled="@(_categoryModel.Id > 0)" />
                <ValidationMessage For="()=> _categoryModel.Slug" />
            </div>
        </div>
        <div class="card-footer d-flex justify-content-between align-items-center">
            <button type="button" class="btn btn-sm btn-default" @onclick="CloseFormAsync">Cancel</button>
            <button type="submit" class="btn btn-sm btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Category Category { get; set; }

    [Parameter]
    public EventCallback<MethodResult> OnSaveCategory { get; set; }

    [Parameter]
    public EventCallback OnCloseForm{ get; set; }

    private Category _categoryModel = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _categoryModel = Category;
    }

    private void OnNameBlur()
    {
        if (_categoryModel.Id == 0 && !string.IsNullOrWhiteSpace(_categoryModel.Name))
        {
            _categoryModel.Slug = _categoryModel.Name.Slugify();
        }
    }

    private async Task CloseFormAsync()
    {
        _categoryModel = new();
        await OnCloseForm.InvokeAsync();
    }

    private async Task SaveCategoryAsync()
    {
        MethodResult result = await CategoryService.SaveCategoryAsync(_categoryModel);
        if (result.Status)
        {
            _categoryModel = new();
        }
        await OnSaveCategory.InvokeAsync(result);
    }
}
